@page "/products/delete/{id:int}"
@using BlazingShop.Models
@using BlazingShop.Data
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context;
@inject NavigationManager _navigationManager

<PageTitle>Delete Product</PageTitle>

<h1>Delete @_model?.Title?</h1>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

<EditForm Model="@_model" OnValidSubmit="@HandleSubmit">
    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <InputText readonly class="form-control" type="text" id="Title" @bind-Value="_model.Title" />
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <InputNumber readonly class="form-control" type="number" id="Price" @bind-Value="_model.Price" />
    </div>
    <button class="btn btn-danger" type="submit"><i class="oi oi-delete"></i>  DELETE</button>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }

    private Product? _model = new();
    private string? _errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        _model = await _context.Products.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);
    }

    private async Task HandleSubmit()
    {
        try
        {
            var prod = await _context.Products.FirstOrDefaultAsync(x => x.Id == Id);
            if (prod is null)
                throw new Exception("Produto não encontrado");

            _context.Products.Remove(prod);
            await _context.SaveChangesAsync();

            _navigationManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }

}